let SessionLoad = 1
let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~/dev/castor/backend
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
let s:shortmess_save = &shortmess
if &shortmess =~ 'A'
  set shortmess=aoOA
else
  set shortmess=aoO
endif
badd +62 src/app/api/private/resolvers/dashboardField/resolver.ts
badd +11 src/app/api/private/useCases/user/viewer/dashboardField/getGroups.ts
badd +47 src/app/repositories/dashboardField/repository.ts
badd +14 src/app/api/private/outputs/dashboardFields/DashboardFieldGroup.ts
badd +39 src/app/api/private/inputs/dashboardField/GetDashboardFieldsScope.ts
badd +1 ~/dev/castor/backend
badd +55 src/app/models/DashboardField.ts
badd +17 src/app/api/private/inputs/dashboardField/DashboardFieldInput.ts
argglobal
%argdel
$argadd ~/dev/castor/backend
edit src/app/api/private/outputs/dashboardFields/DashboardFieldGroup.ts
let s:save_splitbelow = &splitbelow
let s:save_splitright = &splitright
set splitbelow splitright
wincmd _ | wincmd |
split
1wincmd k
wincmd w
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
let &splitbelow = s:save_splitbelow
let &splitright = s:save_splitright
wincmd t
let s:save_winminheight = &winminheight
let s:save_winminwidth = &winminwidth
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 43 + 44) / 89)
exe '2resize ' . ((&lines * 43 + 44) / 89)
exe 'vert 2resize ' . ((&columns * 207 + 208) / 416)
exe '3resize ' . ((&lines * 43 + 44) / 89)
exe 'vert 3resize ' . ((&columns * 208 + 208) / 416)
argglobal
balt src/app/models/DashboardField.ts
let s:l = 14 - ((13 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 14
normal! 067|
wincmd w
argglobal
if bufexists(fnamemodify("src/app/models/DashboardField.ts", ":p")) | buffer src/app/models/DashboardField.ts | else | edit src/app/models/DashboardField.ts | endif
if &buftype ==# 'terminal'
  silent file src/app/models/DashboardField.ts
endif
balt src/app/api/private/inputs/dashboardField/DashboardFieldInput.ts
let s:l = 59 - ((22 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 59
normal! 053|
wincmd w
argglobal
if bufexists(fnamemodify("src/app/api/private/inputs/dashboardField/DashboardFieldInput.ts", ":p")) | buffer src/app/api/private/inputs/dashboardField/DashboardFieldInput.ts | else | edit src/app/api/private/inputs/dashboardField/DashboardFieldInput.ts | endif
if &buftype ==# 'terminal'
  silent file src/app/api/private/inputs/dashboardField/DashboardFieldInput.ts
endif
balt src/app/models/DashboardField.ts
let s:l = 17 - ((16 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 17
normal! 03|
wincmd w
3wincmd w
exe '1resize ' . ((&lines * 43 + 44) / 89)
exe '2resize ' . ((&lines * 43 + 44) / 89)
exe 'vert 2resize ' . ((&columns * 207 + 208) / 416)
exe '3resize ' . ((&lines * 43 + 44) / 89)
exe 'vert 3resize ' . ((&columns * 208 + 208) / 416)
if exists(':tcd') == 2 | tcd ~/dev/castor/backend | endif
tabnext 1
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0 && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20
let &shortmess = s:shortmess_save
let &winminheight = s:save_winminheight
let &winminwidth = s:save_winminwidth
let s:sx = expand("<sfile>:p:r")."x.vim"
if filereadable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &g:so = s:so_save | let &g:siso = s:siso_save
set hlsearch
nohlsearch
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
